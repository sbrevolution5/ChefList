@page "/recipes/details/{id}"
@using MasterMealWA.Client.Models
@inject IApiService _api
@inject IDialogService _dialogService
@inject ISnackbar snackbar
@inject IUserService _userService
@inject IImageReader _imageReader
@inject NavigationManager _nav
@attribute [AllowAnonymous]
<MudItem xs="6">
    <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowLeft" Link="recipes" Title="Go Back"></MudIconButton>
</MudItem>
<MudItem xs="6">

    <MudNumericField Label="Desired Servings" Disabled="recipe is null" @bind-Value="DesiredServings">
    </MudNumericField>

    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Disabled="recipe is null" OnClick="ResetScaling">Reset Scaling</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="recipe is null" OnClick="ScaleRecipe">Scale Recipe</MudButton>
</MudItem>
@if (recipe is null)
{
    <RecipeSkeleton></RecipeSkeleton>
}
else
{
    <MudItem xs="8">
        <MudText Typo="Typo.h2">@recipe.Name</MudText>

        <MudCard>

            <MudCardMedia Image="@(_imageReader.ReadImageData(recipe.Image.ImageData, recipe.Image.ContentType))"></MudCardMedia>
            <MudCardActions>
                <MudButton Color="Color.Error" OnClick="ReportThisRecipe">Report Recipe</MudButton>
                @if (UserId == recipe.AuthorId)
                {

                    <MudButtonGroup Color="Color.Primary" OverrideStyles="false">

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CalendarToday" OnClick="AddMeal">Schedule Meal</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit" Link=@($"recipes/edit/{recipe.Id}")>Edit Recipe</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteRecipe">Delete Recipe</MudButton>
                    </MudButtonGroup>
                }
                else
                {
                    <AuthorizeView Roles="Admin, Moderator">
                        <Authorized>
                            <MudIconButton Variant="Variant.Filled" Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" Link=@($"/recipes/edit/{recipe.Id}")></MudIconButton>
                            <MudIconButton Variant="Variant.Filled" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteRecipe"></MudIconButton>
                            @*<MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.CalendarToday" OnClick="@(()=>AddMeal(recipe))"></MudIconButton>*@
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView>
                        <Authorized>

                            <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.CalendarToday" OnClick="AddMeal"></MudIconButton>
                        </Authorized>
                    </AuthorizeView>
                }
            </MudCardActions>
            <MudCardContent>
                <MudGrid>

                    <MudItem xs="6">
                        <MudCard Elevation="2">

                            <MudCardContent>

                                <MudText>@recipe.Description</MudText>
                            </MudCardContent>
                            <MudCardActions>

                                <MudText Class="d-flex justify-center mt-4">
                                    Source:
                                    <MudLink Href="@recipe.RecipeSourceUrl">@recipe.RecipeSource</MudLink>
                                </MudText>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="2">
                        <MudCard>
                            <MudCardHeader>Ratings</MudCardHeader>
                            <MudCardContent>
                                <RecipeRating recipe="recipe" UserId="@UserId"></RecipeRating>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="4">

                        <MudSimpleTable Elevation="2">
                            <tbody>
                                <tr>
                                    <td>Serves:</td>
                                    <td>
                                        @InitialServings @if (IsScaled)
                                        {
                                            <MudText Style="font-weight:bold;" Color="Color.Primary">
                                                Scaled to (@DesiredServings)
                                            </MudText>
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td>Time To Cook:</td>
                                    <td>@recipe.CookingTime</td>
                                </tr>
                                <tr>
                                    <td>Tags:</td>
                                    <td>
                                        @foreach (var tag in recipe.Tags)
                                        {
                                            <MudChip Color="@BadgeColor(tag.Category)">@tag.Name</MudChip>
                                        }
                                    </td>
                                </tr>
                            </tbody>
                        </MudSimpleTable>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="4">

        <MudCard>
            <MudTabs>
                <MudTabPanel Text="Ingredients">
                    @if (!IsScaled)
                    {

                        <MudList>
                            @foreach (var ingredient in recipe.Ingredients)
                            {
                                <MudListItem>
                                    <MudPaper Elevation="2">

                                        <MudText Class="h4">
                                            @ingredient.Ingredient.Name
                                        </MudText>
                                        <MudText>@ingredient.Quantity</MudText>
                                        <MudText>@ingredient.Notes</MudText>
                                    </MudPaper>
                                </MudListItem>
                            }
                        </MudList>
                    }
                    else
                    {
                        <MudGrid>
                            <MudItem xs="12">
                                <MudSimpleTable>
                                    <thead>

                                    <td>
                                        Original Measurements (@InitialServings servings)
                                    </td>
                                    <td>
                                        Scaled for @DesiredServings servings
                                    </td>
                                    </thead>
                                    <tbody>
                                        @foreach (var row in IngredientRows)
                                        {
                                            <tr>
                                                <td>
                                                    <MudPaper Elevation="2">

                                                        <MudText Class="h4">
                                                            @row.old.Ingredient.Name
                                                        </MudText>
                                                        <MudText>@row.old.Quantity</MudText>
                                                        <MudText>@row.old.Notes</MudText>
                                                    </MudPaper>
                                                </td>
                                                <td>
                                                    <MudPaper Elevation="2">

                                                        <MudText Class="h4">
                                                            @row.scaled.Ingredient.Name
                                                        </MudText>
                                                        <MudText>@row.scaled.Quantity</MudText>
                                                        <MudText>@row.scaled.Notes</MudText>
                                                    </MudPaper>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </MudSimpleTable>
                            </MudItem>
                        </MudGrid>
                    }
                </MudTabPanel>
                <MudTabPanel Text="Supplies">
                    <MudList>
                        @if (IsScaled)
                        {
                            <MudListItem>
                                <MudPaper Elevation="2">

                                    <MudText Style="font-weight:bold;" Color="Color.Error">
                                        Recipe has been scaled from @InitialServings servings to @DesiredServings servings, but supplies were not scaled.
                                    </MudText>
                                </MudPaper>
                            </MudListItem>
                        }
                        @foreach (var supply in recipe.Supplies)
                        {
                            <MudListItem>

                                <MudPaper Elevation="2">
                                    <MudText Class="h4">@supply.Quantity @supply.Supply.Name</MudText>
                                </MudPaper>
                            </MudListItem>
                        }
                    </MudList>
                </MudTabPanel>
                <MudTabPanel Text="Steps">
                    <MudList>
                        @if (IsScaled)
                        {
                            <MudListItem>
                                <MudPaper Elevation="2">

                                    <MudText Style="font-weight:bold;" Color="Color.Error">
                                        Recipe has been scaled from @InitialServings servings to @DesiredServings servings, but any measurements written in steps were not scaled.
                                    </MudText><MudText>
                                        (i.e. Add 2 tsp will still say add 2 tsp even if recipe now calls for more or less).  Please reference the ingredients tab to see measurement scaling results.
                                    </MudText>
                                </MudPaper>
                            </MudListItem>
                        }
                        @foreach (var step in recipe.Steps.OrderBy(s => s.StepNumber))
                        {
                            <MudListItem>
                                <MudPaper Elevation="2">
                                    <MudText>@step.StepNumber. @step.Text</MudText>
                                </MudPaper>
                            </MudListItem>
                        }
                    </MudList>
                </MudTabPanel>
            </MudTabs>

        </MudCard>
    </MudItem>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private Recipe recipe;
    private string imageData { get; set; }
    private string UserId { get; set; }
    private bool IsScaled { get; set; }
    private ICollection<QIngredient> ScaledIngredients { get; set; }
    private int DesiredServings { get; set; }
    private int InitialServings { get; set; }
    private IEnumerable<ScaledIngredient> IngredientRows { get; set; }
    private List<BreadcrumbItem> crumbList = new()
    {
        new BreadcrumbItem("Recipes", href: "/recipes")
    };
    public async Task AddMeal()
    {
        var parameters = new DialogParameters { ["recipe"] = recipe, ["Servings"] = DesiredServings };
        var dialog = _dialogService.Show<MealCreate>("Schedule Meal", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            snackbar.Add("Meal planned!");
        }
    }
    public Color BadgeColor(CategoryType type)
    {
        if (type == CategoryType.Nationality)
        {
            return Color.Primary;
        }
        if (type == CategoryType.Protein)
        {
            return Color.Secondary;
        }
        return Color.Tertiary;

    }
    protected override async Task OnInitializedAsync()
    {
        IsScaled = false;
        UserId = await _userService.GetUserIdAsync();
        bool auth = !string.IsNullOrEmpty(UserId);
        var options = new JsonSerializerOptions()
        {
            ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.Preserve,
            PropertyNamingPolicy = null
        };
        if (auth)
        {

            recipe = await _api.GetAsync<Recipe>($"api/recipes/{Convert.ToInt32(Id)}");
        }
        else
        {

            recipe = await _api.GetAnonAsync<Recipe>($"api/recipes/{Convert.ToInt32(Id)}");
        }
        DesiredServings = recipe.Servings;
        InitialServings = recipe.Servings;
        base.OnInitialized();
    }
    public async Task DeleteRecipe()
    {
        var parameters = new DialogParameters { ["recipe"] = recipe };
        var dialog = _dialogService.Show<RecipeDelete>("Are you sure you want to delete this recipe?", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            _nav.NavigateTo("/recipes");
        }
    }
    private async Task ScaleRecipe()
    {
        if (recipe.Servings == DesiredServings)
        {
            snackbar.Add("Recipe is already scaled to this amount!", Severity.Warning);
            return;
        }
        recipe.Servings = DesiredServings;
        try
        {
            ScaledIngredients = await _api.GetAsync<List<QIngredient>>($"api/recipes/{recipe.Id}/scale/{DesiredServings}");
            IngredientRows = recipe.Ingredients.Zip(ScaledIngredients, (old, scaled) => new ScaledIngredient() { old = old, scaled = scaled });
            IsScaled = true;
            _snackbar.Add("Recipe Scaled", Severity.Success);

        }
        catch (Exception e)
        {

            _snackbar.Add($"Recipe Scaling failed {e.Message}", Severity.Error);
        }
    }
    public async Task ReportThisRecipe()
    {
        var parameters = new DialogParameters { ["recipe"] = recipe};
        var dialog = _dialogService.Show<ReportRecipe>("Report a recipe", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            snackbar.Add("Report Submitted!");
        }
    }
    private async Task ResetScaling()
    {
        await OnInitializedAsync();
    }
}
