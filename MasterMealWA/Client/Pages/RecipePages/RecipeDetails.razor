@page "/recipes/details/{id}"
@inject HttpClient Http
@inject IDialogService _dialogService
@inject ISnackbar snackbar

<MudItem xs="12">

    <MudText Typo="Typo.caption">Recipe</MudText>
</MudItem>
@if (recipe is null)
{
    <MudOverlay>

        <MudText>Loading....</MudText>
    </MudOverlay>
}
else
{
    <MudItem xs="8">

        <MudCard>


            <MudText>@recipe.Name</MudText>
            <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.CalendarToday" OnClick="AddMeal"></MudIconButton>

            <MudText>@recipe.Description</MudText>
        </MudCard>
    </MudItem>
    <MudItem xs="4">

        <MudCard>

            <MudList>
                @foreach (var step in recipe.Steps.OrderBy(s => s.StepNumber))
                {
                    <MudListItem>
                        <MudPaper>
                            <MudText>@step.StepNumber. @step.Text</MudText>
                        </MudPaper>
                    </MudListItem>
                }
            </MudList>
        </MudCard>
        <MudCard>
            <MudCardHeader>

                <MudText Typo="Typo.h3">Ingredients</MudText>
            </MudCardHeader>
            <MudCardContent>

                @foreach (var ingredient in recipe.Ingredients)
                {
                    <MudPaper>

                        <MudText Class="h4">
                            @ingredient.Ingredient.Name
                        </MudText>
                        <MudText>@ingredient.Quantity</MudText>
                        <MudText>@ingredient.Notes</MudText>
                    </MudPaper>
                }
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>

                <MudText Typo="Typo.h3">Ingredients</MudText>
            </MudCardHeader>
            <MudCardContent>

                @foreach (var supply in recipe.Supplies)
                {
                    <MudPaper>
                        <MudText Class="h4">@supply.Quantity @supply.Supply.Name</MudText>
                    </MudPaper>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private Recipe recipe;
    public async Task AddMeal()
    {
        var parameters = new DialogParameters { ["recipe"] = recipe };
        var dialog = _dialogService.Show<MealCreate>("Schedule Meal", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {

            snackbar.Add("Meal planned!");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var options = new JsonSerializerOptions()
        {
            ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.Preserve,
            PropertyNamingPolicy = null
        };
        recipe = await Http.GetFromJsonAsync<Recipe>($"Api/recipes/{Id}", options);
        base.OnInitialized();
    }
}
