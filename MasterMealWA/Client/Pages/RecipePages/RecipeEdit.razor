@page "/recipes/edit/{Id}"
@using MasterMealWA.Client.Extensions
@inject HttpClient Http
@inject IApiService _api
@inject NavigationManager nav
@inject IUserService _userService
@inject IDialogService _dialogService
@inject IImageReader _imageReader
@attribute [Authorize]
@using System.Net.Http.Headers
@using MasterMealWA.Shared.Models.Dtos
@if (recipe is null)
{
    <Loader></Loader>

}
else
{
    <EditForm Model="@recipe" OnValidSubmit="UpdateRecipeAsync">
        <DataAnnotationsValidator />
        <MudGrid>

            <MudItem xs="12">

                <MudText Typo="Typo.h3">Recipe Create</MudText>
                <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">Save Recipe</MudButton>

            </MudItem>
            <MudItem xs="12" sm="6" md="4">

                <MudCard>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12">

                                <MudTextField Label="Title" HelperTextOnFocus="true" HelperText="The name of the recipe" @bind-Value="recipe.Name" For="@(()=> recipe.Name)" />
                            </MudItem>
                            <MudItem xs="12">

                                <MudTextField Label="Description" HelperTextOnFocus="true" HelperText="The description of the recipe" @bind-Value="recipe.Description" For="@(()=> recipe.Description)" />
                            </MudItem>
                            <MudItem xs="12">

                                <InputFile id="fileInput" OnChange="UploadFiles" hidden />
                                <MudFab HtmlTag="label"
                                        Color="Color.Secondary"
                                        Icon="@Icons.Filled.Image"
                                        Label="Upload Image"
                                        for="fileInput" />

                                <MudCard>
                                    @if (!imageLoading)
                                    {

                                        <MudCardMedia Image="@(imageString)">
                                        </MudCardMedia>
                                    }
                                    else
                                    {
                                        <div class="d-flex align-center justify-center">
                                            <Loader />
                                        </div>
                                    }
                                </MudCard>
                                <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="ResetImage">Reset to default Image</MudButton>
                            </MudItem>
                            <MudItem xs="12">

                                <MudTextField Label="Source" HelperTextOnFocus="true" HelperText="Where did you get the recipe?  (if its personal, leave blank)" @bind-Value="recipe.RecipeSource" For="@(()=> recipe.RecipeSource)" />
                            </MudItem>
                            <MudItem xs="12">

                                <MudTextField Label="Source Link" HelperTextOnFocus="true" HelperText="Link to the page you found this recipe on.  Please prefix with https://" @bind-Value="recipe.RecipeSourceUrl" For="@(()=> recipe.RecipeSourceUrl)" />
                            </MudItem>
                            <MudItem xs="6">

                                <MudNumericField Label="Cooking Time" Min="15" Max="90" HelperText="Estimated minutes to cook recipe" HelperTextOnFocus="true" @bind-Value="recipe.CookingTime" For="@(()=> recipe.CookingTime)" />
                            </MudItem>
                            <MudItem xs="6">

                                <MudSelect T="int" @bind-Value="recipe.Servings" Label="Servings" HelperText="How many people the recipe serves.  Users can select any serving size they'd like displayed or added to their shopping list, and the recipe will be scaled.">
                                    <MudSelectItem Value="1">1</MudSelectItem>
                                    <MudSelectItem Value="2">2</MudSelectItem>
                                    <MudSelectItem Value="4">4</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            @if (Tags == null)
                            {
                                <div class="d-flex align-center justify-center">
                                    <Loader />
                                </div>
                            }
                            else
                            {
                                <MudItem xs="12">

                                    <MudChipSet MultiSelection="true" @bind-SelectedChips="recipeTags" Filter="true">

                                        @foreach (RecipeTag tag in Tags.OrderBy(t => t.Category))
                                        {
                                            <MudChip Color="BadgeColor(tag.Category)" Default="@RecipeHasTag(tag)" Tag="tag">@tag.Name</MudChip>
                                        }
                                    </MudChipSet>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
                <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">Save Recipe</MudButton>

            </MudItem>
            <MudItem xs="12" sm="6" md="4">

                <MudCard>
                    <MudCardHeader><MudBadge Content="recipe.Ingredients.Count" Color="Color.Primary" Bordered="true">Ingredients </MudBadge></MudCardHeader>
                    <MudCardContent>
                        <MudExpansionPanels>
                            @foreach (var ingredient in recipe.Ingredients)
                            {
                                <MudExpansionPanel IsInitiallyExpanded="true">
                                    <TitleContent>
                                        <MudText>@MakeIngredientString(ingredient)</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudCard Elevation="2">
                                            <MudCardContent>

                                                <QIngredientCreate qingredient="@ingredient" ingredientList="Ingredients" ComponentDataUpdated="ComponentUpdated" />
                                            </MudCardContent>
                                            <MudCardActions>

                                                <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="@(()=>RemoveIngredient(ingredient))">Remove</MudButton>
                                            </MudCardActions>
                                        </MudCard>
                                    </ChildContent>
                                </MudExpansionPanel>
                            }
                        </MudExpansionPanels>

                        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" @onclick="()=>recipe.Ingredients.Add(new())" />
                        <MudFab OnClick="NewIngredient" Color="Color.Success" Icon="@Icons.Material.Filled.FiberNew" Label="Add ingredient not in list" />
                    </MudCardContent>
                </MudCard>
                <MudCard>
                    <MudCardHeader><MudBadge Content="recipe.Supplies.Count" Color="Color.Primary" Bordered="true">Supplies </MudBadge></MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            @foreach (var supply in recipe.Supplies)
                            {
                                <MudItem xs="12">

                                    <MudCard Elevation="2">
                                        <MudCardContent>

                                            <SupplyPicker supply="supply" supplyList="supplyList"></SupplyPicker>
                                        </MudCardContent>
                                        <MudCardActions>

                                            <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="@(()=>RemoveSupply(supply))">Remove</MudButton>
                                        </MudCardActions>
                                    </MudCard>
                                </MudItem>
                            }
                            <MudItem>

                                <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" @onclick="()=>recipe.Supplies.Add(new())" />
                                <MudFab OnClick="NewSupply" Color="Color.Success" Icon="@Icons.Material.Filled.FiberNew" Label="Add supply not in list"></MudFab>

                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardHeader><MudBadge Content="recipe.Steps.Count" Color="Color.Primary" Bordered="true">Steps</MudBadge></MudCardHeader>
                    <MudCardContent>
                        <MudGrid>

                            @foreach (var step in recipe.Steps.OrderBy(s => s.StepNumber))
                            {
                                <MudItem xs="12">
                                    <MudCard Elevation="2">
                                        <MudCardContent>

                                            <StepCreate step="step" stepmax="recipe.Steps.Count" StepUp="()=>IncreaseStep(step)" StepDown="()=>DecreaseStep(step)"></StepCreate>
                                        </MudCardContent>
                                        <MudCardActions>

                                            <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="@(()=>RemoveStep(step))">Remove</MudButton>
                                        </MudCardActions>
                                    </MudCard>
                                </MudItem>
                            }
                            <MudItem>

                                <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" @onclick="()=>recipe.Steps.Add(new(){StepNumber=recipe.Steps.Count+1 })" />
                            </MudItem>
                        </MudGrid>

                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
}
@code{
    [Parameter]
    public string Id { get; set; }
    public Recipe recipe { get; set; }
    private MultipartFormDataContent imageFormContent { get; set; }
    public DBImage image { get; set; }
    public List<RecipeTag> Tags { get; set; }
    public List<Ingredient> Ingredients { get; set; }
    public List<IngredientType> Types { get; set; }
    public List<QIngredient> RemovedIngredients { get; set; } = new();
    public List<QSupply> RemovedSupplies { get; set; } = new();
    public List<Step> RemovedSteps { get; set; } = new();
    public List<Supply> supplyList { get; set; }
    public MudChip[] recipeTags { get; set; }
    public bool ImageReset { get; set; }
    public bool ImageChange { get; set; }
    public int ImgId { get; set; }
    public string imageString { get; set; }
    public bool imageLoading { get; set; }
    protected override async Task OnInitializedAsync()
    {
        recipe = await _api.GetAsync<Recipe>($"api/recipes/{Convert.ToInt32(Id)}");
        if (recipe.AuthorId != await _userService.GetUserIdAsync() && !(await _userService.IsModeratorAsync()))
        {
            nav.NavigateTo("recipes");
        }
        image = recipe.Image;
        imageString = _imageReader.ReadImageData(image.ImageData, image.ContentType);
        Types = await _api.GetAsync<List<IngredientType>>("api/ingredienttypes");
        Tags = await _api.GetAsync<List<RecipeTag>>("api/recipeTags");
        Ingredients = await _api.GetAsync<List<Ingredient>>("api/ingredients");
        supplyList = await _api.GetAsync<List<Supply>>("api/Supplies");
    }
    public string MakeIngredientString(QIngredient ingredient)
    {
        var res = "";
        if (ingredient.QuantityNumber > 0)
        {

            res += ingredient.QuantityNumber.ToString() + " ";
        }
        if (ingredient.Fraction != Fraction.NoFraction)
        {
            res += ingredient.Fraction.GetDescription() + " ";
        }
        if (ingredient.MeasurementType == MeasurementType.Volume)
        {

            res += ingredient.VolumeMeasurementUnit.ToString() + " ";
        }
        else if (ingredient.MeasurementType == MeasurementType.Mass)
        {

            res += ingredient.MassMeasurementUnit.ToString() + " ";
        }
        if (ingredient.IngredientId > 0)
        {
            var ingredientName = Ingredients.Where(i => i.Id == ingredient.IngredientId).FirstOrDefault().Name;
            res += ingredientName;
        }
        return res;
    }
    public void IncreaseStep(Step s)
    {
        if (s.StepNumber < recipe.Steps.Count)
        {
            var next = recipe.Steps.Where(nextStep => s.StepNumber + 1 == nextStep.StepNumber).FirstOrDefault();
            next.StepNumber -= 1;
            s.StepNumber += 1;
            StateHasChanged();
        }
    }
    public void DecreaseStep(Step s)
    {
        if (s.StepNumber > 1)
        {
            var previous = recipe.Steps.Where(prevStep => s.StepNumber - 1 == prevStep.StepNumber).FirstOrDefault();
            previous.StepNumber += 1;
            s.StepNumber -= 1;
            StateHasChanged();
        }
    }
    public Color BadgeColor(CategoryType type)
    {
        if (type == CategoryType.Nationality)
        {
            return Color.Primary;
        }
        if (type == CategoryType.Protein)
        {
            return Color.Secondary;
        }
        return Color.Tertiary;

    }
    public void RemoveStep(Step step)
    {
        if (step.Id != 0)
        {
            RemovedSteps.Add(step);
        }
        recipe.Steps.Remove(step);
    }
    public void RemoveSupply(QSupply supply)
    {
        if (supply.Id != 0)
        {
            RemovedSupplies.Add(supply);
        }
        recipe.Supplies.Remove(supply);
    }
    public void RemoveIngredient(QIngredient ingredient)
    {
        if (ingredient.Id != 0)
        {
            RemovedIngredients.Add(ingredient);
        }
        recipe.Ingredients.Remove(ingredient);
    }
    public bool RecipeHasTag(RecipeTag tag)
    {
        if (recipe.Tags.Where(t => t.Id == tag.Id).Count() > 0)
        {
            return true;
        }
        return false;
    }
    private async Task ResetImage()
    {
        if (image is null || image.Id == 1)
        {
            _snackbar.Add("The image is already the default", Severity.Warning);
            return;
        }
        var parameters = new DialogParameters { ["recipe"] = recipe };
        var dialog = _dialogService.Show<ImageRecipeReset>("Are you sure?", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            image = await _api.GetAsync<DBImage>("api/dbimages/1");
            imageString = _imageReader.ReadImageData(image.ImageData, image.ContentType);

            ImageReset = true;
        };
    }
    public async Task UpdateRecipeAsync()
    {
        foreach (var ing in recipe.Ingredients)
        {
            ing.Ingredient = null;
        }
        foreach (var sup in recipe.Supplies)
        {
            sup.Supply = null;
        }
        var Tags = recipeTags.Select(r => (RecipeTag)r.Tag).ToList();
        var fakeRecipe = recipe;
        RecipeEditDto dto = new()
        {
            SuppliesToRemove = RemovedSupplies,
            StepsToRemove = RemovedSteps,
            IngredientsToRemove = RemovedIngredients,
            Recipe = fakeRecipe,
            RecipeTags = Tags,
            Id = recipe.Id,
            ResetImage = ImageReset,
            ImageChanged = ImageChange
        };
        try
        {

            await _api.UpdateAsync<RecipeEditDto>($"api/recipes/{recipe.Id}", dto);
            _snackbar.Add("Recipe Updated", Severity.Success);
            nav.NavigateTo($"/recipes/details/{recipe.Id}");
        }
        catch (Exception e)
        {
            _snackbar.Add($"Update failed {e.Message}", Severity.Error);
        }

    }
    public async Task NewIngredient()
    {
        var parameters = new DialogParameters { ["types"] = Types };
        var dialog = _dialogService.Show<IngredientCreate>("New Ingredient", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Ingredients = await _api.GetAsync<List<Ingredient>>("api/ingredients");
            var nullList = recipe.Ingredients.Where(i => i.Ingredient is null);
            if (nullList.Count() > 0)
            {
                foreach (var ing in nullList)
                {
                    var ingredientResult = result.Data as Ingredient;
                    ing.Ingredient = ingredientResult;
                    ing.IngredientId = ingredientResult.Id;
                    ing.MeasurementType = ingredientResult.MeasurementType;
                }
                StateHasChanged();
            }
        }
    }
    public async Task NewSupply()
    {
        var dialog = _dialogService.Show<SupplyCreate>
            ("New Supply");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            supplyList = await _api.GetAsync<List<Supply>>("api/supplies");
            var nullList = recipe.Supplies.Where(i => i.Supply is null);
            if (nullList.Count() > 0)
            {
                foreach (var sup in nullList)
                {
                    var supplyResult = result.Data as Supply;
                    sup.Supply = supplyResult;
                    sup.SupplyId = supplyResult.Id;
                }
                StateHasChanged();
            }
        }
    }
    public IBrowserFile file;
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {

        file = e.File;
        if (file != null)
        {
            var resizedFile = await file.RequestImageFileAsync("image/png", 1000, 1000);

            using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
            {
                imageFormContent = new MultipartFormDataContent();
                imageFormContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                imageFormContent.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", file.Name);

                try
                {
                    imageLoading = true;
                    StateHasChanged();
                    image = await _api.GetPreviewImage("/api/dbimages/tempimage", imageFormContent);
                    _snackbar.Add("Image Updated", Severity.Success);
                    imageString = _imageReader.ReadImageData(image.ImageData, image.ContentType);
                    recipe.Image = image;
                    StateHasChanged();
                    ImageChange = true;
                    ImageReset = false;
                    imageLoading = false;

                }
                catch (Exception ex)
                {
                    _snackbar.Add($"Image Failed to update {ex.Message}", Severity.Error);
                    imageLoading = false;
                }
            }
        }
    }
    void ComponentUpdated(string args)
    {
        StateHasChanged();
    }
}
