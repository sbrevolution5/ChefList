@page "/recipes/edit/{id}"
@inject HttpClient Http
@inject IApiService _api
@inject NavigationManager nav
@using MasterMealWA.Shared.Models.Dtos
@if (recipe is null)
{
    <MudText>Loading...</MudText>
}
else
{
    <EditForm Model="@recipe" OnValidSubmit="UpdateRecipeAsync">
        <DataAnnotationsValidator />
        <MudGrid>

            <MudItem xs="12">

                <MudText Typo="Typo.h3">Recipe Create</MudText>
            </MudItem>
            <MudItem xs="4">

                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Title" HelperText="The name of the recipe" @bind-Value="recipe.Name" For="@(()=> recipe.Name)" />
                        <MudTextField Label="Description" HelperText="The description of the recipe" @bind-Value="recipe.Description" For="@(()=> recipe.Description)" />
                        <InputFile id="fileInput" OnChange="UploadFiles" hidden />
                        <MudFab HtmlTag="label"
                                Color="Color.Secondary"
                                Icon="@Icons.Filled.Image"
                                Label="Load picture"
                                for="fileInput" />
                        @if (files != null)
                        {
                            <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
                            <MudList>
                                @foreach (var file in files)
                                {
                                    <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                                        @file.Name <code>@file.Size bytes</code>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                        <MudTextField Label="Source" HelperText="Where did you get the recipe?  (if its personal, leave blank)" @bind-Value="recipe.RecipeSource" For="@(()=> recipe.RecipeSource)" />
                        <MudTextField Label="Source Link" HelperText="Link to the page you found this recipe on.  Please prefix with https://" @bind-Value="recipe.RecipeSourceUrl" For="@(()=> recipe.RecipeSourceUrl)" />
                        <MudNumericField Label="Cooking Time" HelperText="Estimated minutes to cook recipe" @bind-Value="recipe.CookingTime" For="@(()=> recipe.CookingTime)" />
                        <MudNumericField Label="Servings" HelperText="How many people the recipe Serves" @bind-Value="recipe.Servings" For="@(()=> recipe.Servings)" />
                        @if (Tags == null)
                        {
                            <p>loading...</p>}
                        else
                        {
                            <MudChipSet MultiSelection="true" @bind-SelectedChips="recipeTags" Filter="true">

                                @foreach (RecipeTag tag in Tags)
                                {
                                    <MudChip Tag="tag" Default="@(recipe.Tags.Select(t=>t.Id).Contains(tag.Id))">@tag.Name</MudChip>
                                }
                            </MudChipSet>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="4">

                <MudCard>
                    <MudCardHeader>Ingredients</MudCardHeader>
                    <MudCardContent>
                        @foreach (var ingredient in recipe.Ingredients)
                        {
                        <MudCard Elevation="2">

                            <QIngredientCreate qIngredient="@ingredient" ingredientList="ingredients" />
                            <MudButton Color="Color.Error" @onclick="(()=>recipe.Ingredients.Remove(ingredient))">Remove</MudButton>
                        </MudCard>
                        }
                        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" @onclick="()=>recipe.Ingredients.Add(new())" />
                    </MudCardContent>
                </MudCard>
                <MudCard>
                    <MudCardHeader>Supplies</MudCardHeader>
                    <MudCardContent>
                        @foreach (var supply in recipe.Supplies)
                        {
                        <MudCard Elevation="2">

                            <SupplyPicker supply="supply" supplyList="supplyList"></SupplyPicker>
                            <MudButton Color="Color.Error" @onclick="(()=>recipe.Supplies.Remove(supply))">Remove</MudButton>
                        </MudCard>
                        }
                        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" @onclick="()=>recipe.Supplies.Add(new())" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="4">
                <MudCard>
                    <MudCardHeader>Steps</MudCardHeader>
                    <MudCardContent>
                        @foreach (var step in recipe.Steps)
                        {
                            <StepCreate step="step"></StepCreate>
                            <MudButton class="btn btn-danger" @onclick="(()=>recipe.Steps.Remove(step))">Remove</MudButton>
                        }
                        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" @onclick="()=>recipe.Steps.Add(new())" />

                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save Recipe</MudButton>
    </EditForm>
}
@code{
    [Parameter]
    public string id { get; set; }
    public Recipe recipe { get; set; } = new();
    public List<RecipeTag> Tags { get; set; }
    public List<Ingredient> ingredients { get; set; }
    public List<Supply> supplyList { get; set; }
    public MudChip[] recipeTags { get; set; }
    protected override async Task OnInitializedAsync()
    {
        recipe = await _api.GetRecipeAsync(Convert.ToInt32(id));
        Tags = await _api.GetAllRecipeTypesAsync();
        ingredients = await _api.GetAllIngredientsAsync();
        supplyList = await _api.GetAllSuppliesAsync();
    }
    public async Task UpdateRecipeAsync()
    {
        var Tags = recipeTags.Select(r => (RecipeTag)r.Tag).ToList();
        var fakeRecipe = recipe;
        RecipeEditDto dto = new()
        {
            Recipe = fakeRecipe,
            RecipeTags = Tags,
            Id = recipe.Id,
        };
        await _api.UpdateRecipeAsync(dto);
        nav.NavigateTo($"/recipes/details/{recipe.Id}");
    }
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
        //TODO upload the files to the server
    }
}