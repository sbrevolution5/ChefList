@page "/recipes/{mine?}"
@inject HttpClient Http
@inject IApiService _api
@inject NavigationManager nav

<MudItem xs="3">
    <MudPaper Width="250px" Class="py-3" Square="true">
        <MudExpansionPanels MultiExpansion="true">
            @*
            *@
            <MudExpansionPanel Text="Author">
                <MudSwitch Label="Only My Recipes" @bind-Checked="myRecipes"></MudSwitch>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Supplies">
                <MudSwitch Disabled="true" Label="I have Supplies" @bind-Checked="mySupplies"></MudSwitch>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Categories">
                <MudChipSet MultiSelection="true" Filter="true">
                    @if (RecipeTypes is not null)
                    {
                        @foreach (var category in RecipeTypes)
                        {

                            <MudChip Text="@category.Name"></MudChip>
                        }
                    }
                </MudChipSet>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Rating">
                <div class="d-flex flex-column align-center">
                    <MudRating @bind-SelectedValue="selectedRating" HoveredValueChanged="HandleHoveredValueChanged" />
                    <MudText Typo="Typo.subtitle2" Class="deep-purple-text mt-2">@RatingText</MudText>
                </div>



            </MudExpansionPanel>
            <MudExpansionPanel Text="CookingTime">
                <MudSwitch Disabled="true" Label="FilterByTime" @bind-Checked="timeFilter"></MudSwitch>

                <MudItem xs="12">
                    <MudNumericField @bind-Value="minTime" Label="Min Cooking Time" Variant="Variant.Text" Min="0" Max="60" />
                </MudItem>
                <MudItem xs="12">
                    <MudNumericField @bind-Value="maxTime" Label="Max cooking time" Variant="Variant.Text" Min="0" Max="60" />
                </MudItem>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudPaper>
</MudItem>
<MudItem xs="9">

    @if (recipes is null)
    {
        <MudOverlay>

            <MudText>Loading....</MudText>
        </MudOverlay>
    }
    else
    {
        @foreach (var recipe in recipes)
        {
            <MudCard>
                <MudText>@recipe.Name</MudText>
                <MudText>@recipe.CookingTime</MudText>
                <MudText>@recipe.Servings</MudText>
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Link=@($"/recipes/edit/{recipe.Id}")></MudIconButton>
                <MudLink Href="@($"/recipes/details/{recipe.Id}")">Details</MudLink>
            </MudCard>

        }
        <MudFab Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Label="Add Recipe" aria-label="add recipe" @onclick='()=>nav.NavigateTo("/recipes/create")' />
    }
</MudItem>
@code {
    [Parameter]
    public string mine { get; set; }
    private List<Recipe> recipes;
    private List<RecipeType> RecipeTypes { get; set; }
    private bool mySupplies { get; set; }
    private bool myRecipes { get; set; }
    private bool timeFilter { get; set; }
    private int minTime { get; set; }
    private int maxTime { get; set; }
    private int MinRating { get; set; }
    private int MaxRating { get; set; }
    private int selectedRating = 0;
    private int? activeRating;

    private void HandleHoveredValueChanged(int? val) => activeRating = val;

    private string RatingText => (activeRating ?? selectedRating) switch
    {
        1 => "1 Star or more",
        2 => "2 Stars or more",
        3 => "3 Stars or more",
        4 => "4 Stars or more",
        5 => "5 Stars",
        _ => "Any Rating"
    };
    protected override async Task OnParametersSetAsync()
    {
        mine = mine ?? "";
        if (mine.ToLower() == "myrecipes")
        {

            recipes = await _api.GetMyRecipesAsync();
        }
        else
        {

            recipes = await _api.GetAllRecipesAsync();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        mine = mine ?? "";
        var options = new JsonSerializerOptions()
        {
            ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.Preserve,
            PropertyNamingPolicy = null
        };
        if (mine.ToLower() == "myrecipes")
        {

            recipes = await _api.GetMyRecipesAsync();
        }
        else
        {

            recipes = await _api.GetAllRecipesAsync();
        }
        RecipeTypes = await _api.GetAllRecipeTypesAsync();
        base.OnInitialized();
    }
}
