@page "/recipes/{mine?}"
@using MasterMealWA.Client.Models
@inject IApiService _api
@inject NavigationManager nav
@inject IDialogService _dialogService
@inject ISnackbar snackbar
@inject IImageReader _imageReader
@inject IUserService _userService
@inject IFilterService _filterService
@attribute [AllowAnonymous]

<MudItem xs="12" md="3">
    <AuthorizeView Roles="Admin, Moderator">
        <Authorized>
            <MudButton @onclick='()=>nav.NavigateTo("/recipes/types")'>Manage Recipe Types</MudButton>
        </Authorized>
    </AuthorizeView>
    <MudFab Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Label="Add Recipe" aria-label="add recipe" @onclick='()=>nav.NavigateTo("/recipes/create")' />
    <RecipeFilters Loaded="Loaded" Filters="Filters" RecipeTypes="RecipeTypes" userId="@userId" ReFilter="()=>ChangeFilter()" />
</MudItem>


<MudItem xs="12" md="9">
    @if (!Loaded)
    {

            <div class="d-flex align-center justify-center">

                <Loader></Loader>
            </div>
    }
    else
    {

        <MudGrid>
            @if (FilteredRecipes.Count == 0)
            {
                <MudText Typo="Typo.h3">No Recipes were found, please select a less restrictive filter.</MudText>
            }
            else
            {
                <MudItem xs="6">

                    <MudSelect Label="Sort Recipes" T="int" @bind-Value="sortInt">
                        <MudSelectItem Value="0">Default</MudSelectItem>
                        <MudSelectItem Value="1">Average Rating</MudSelectItem>
                        <MudSelectItem Value="2">A-Z</MudSelectItem>
                        <MudSelectItem Value="3">Z-A</MudSelectItem>
                        <MudSelectItem Value="4">Cooking Time (low-high)</MudSelectItem>
                        <MudSelectItem Value="5">Cooking Time (high-low)</MudSelectItem>
                        <MudSelectItem Value="6">Date Created(old-new)</MudSelectItem>
                        <MudSelectItem Value="7">Date Created(new-old)</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="6">
                    <MudButton OnClick="ChangeSortAndUpdateView" Variant="Variant.Filled" Color="Color.Primary">
                        Sort
                    </MudButton>
                </MudItem>
                @foreach (var recipe in pageRecipes)
                {
                    <MudItem xs="12" md="4">

                        <MudCard Elevation="2">
                            <MudCardMedia Image="@(_imageReader.ReadImageData(recipe.Image.ImageData, recipe.Image.ContentType))"></MudCardMedia>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="6">

                                        <MudText>@recipe.Name</MudText>
                                        <MudText Typo="Typo.caption">@recipe.Author.ScreenName</MudText>
                                        <MudText>Cooking time: @recipe.CookingTime</MudText>
                                        <MudText>Servings: @recipe.Servings</MudText>
                                        @if (!string.IsNullOrWhiteSpace(recipe.RecipeSource))
                                        {
                                            @if (!string.IsNullOrWhiteSpace(recipe.RecipeSourceUrl))
                                            {
                                                <MudText>
                                                    Source:

                                                    <MudLink Href="@recipe.RecipeSourceUrl">@recipe.RecipeSource</MudLink>
                                                </MudText>
                                            }
                                            else
                                            {
                                                <MudText>Source: @recipe.RecipeSource</MudText>
                                            }
                                        }
                                    </MudItem>
                                    <MudItem xs="6">
                                        <RecipeRating recipe="recipe" UserId="@userId"></RecipeRating>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                            <MudCardActions>
                                @if (userId == recipe.AuthorId)
                                {

                                    <MudIconButton Variant="Variant.Filled" Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" Link=@($"/recipes/edit/{recipe.Id}")></MudIconButton>
                                    <MudIconButton Variant="Variant.Filled" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="()=>DeleteRecipe(recipe)"></MudIconButton>
                                    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.CalendarToday" OnClick="@(()=>AddMeal(recipe))"></MudIconButton>
                                }
                                else
                                {
                                    <AuthorizeView Roles="Admin, Moderator">
                                        <Authorized>
                                            <MudIconButton Variant="Variant.Filled" Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" Link=@($"/recipes/edit/{recipe.Id}")></MudIconButton>
                                            <MudIconButton Variant="Variant.Filled" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="()=>DeleteRecipe(recipe)"></MudIconButton>
                                        </Authorized>
                                    </AuthorizeView>
                                    <AuthorizeView>
                                        <Authorized>

                                            <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.CalendarToday" OnClick="@(()=>AddMeal(recipe))"></MudIconButton>
                                        </Authorized>
                                    </AuthorizeView>
                                }
                                <MudLink Href="@($"/recipes/details/{recipe.Id}")">Details</MudLink>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>

                }
            }
        </MudGrid>
    }
    <MudDivider></MudDivider>
    <MudPagination Rectangular="true" Variant="Variant.Text" SelectedChanged="(int p)=>ChangePage(p)" Count="@pageCount" />
</MudItem>
@code {
    [Parameter]
    public string mine { get; set; }
    public Filter Filters { get; set; } = new();
    private List<Recipe> AllRecipes;
    public List<Recipe> FilteredRecipes;
    public List<Recipe> SortedRecipes;
    private List<Recipe> pageRecipes { get; set; }
    private List<RecipeTag> RecipeTypes { get; set; }
    private bool mySupplies { get; set; }
    private bool myRecipes { get; set; }
    private int? activeRating;
    private int pageCount { get; set; } = 0;
    private string userId { get; set; }
    public bool Auth { get; set; }
    public int sortInt { get; set; } = 0;
    public bool Loaded { get; set; } = false;
    public int CurrentPage { get; set; } = 1;
    protected override async Task OnInitializedAsync()
    {
        userId = await _userService.GetUserIdAsync();
        Auth = !string.IsNullOrEmpty(userId);
        mine = mine ?? "";
        await GetRecipesAsync();
        ChangePage(CurrentPage);
        await GetTagsAsync();
        Loaded = true;
        base.OnInitialized();
    }
    public Color BadgeColor(CategoryType type)
    {
        if (type == CategoryType.Nationality)
        {
            return Color.Primary;
        }
        if (type == CategoryType.Protein)
        {
            return Color.Secondary;
        }
        return Color.Tertiary;

    }
    private void HandleHoveredValueChanged(int? val) => activeRating = val;
    public async Task AddMeal(Recipe recipe)
    {
        var parameters = new DialogParameters { ["recipe"] = recipe };
        var dialog = _dialogService.Show<MealCreate>("Schedule Meal", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            snackbar.Add("Meal planned!");
        }
    }
    private string RatingText => (activeRating ?? Filters.LowestRating) switch
    {
        1 => "1 Star or more",
        2 => "2 Stars or more",
        3 => "3 Stars or more",
        4 => "4 Stars or more",
        5 => "5 Stars",
        _ => "Any Rating"
    };
    protected override async Task OnParametersSetAsync()
    {
        mine = mine ?? "";
        await GetRecipesAsync();
    }
    public void FilterRecipes()
    {
        FilteredRecipes = _filterService.ApplyFilter(AllRecipes, Filters, userId);
        pageCount = (FilteredRecipes.Count / 6) + 1;
    }
    private void ChangeFilter()
    {
        FilterRecipes();
        ChangeSortAndUpdateView();
    }
    private void ChangeSortAndUpdateView()
    {
        SortRecipes();
        if (CurrentPage > pageCount)
        {
            CurrentPage = pageCount;
        }
        ChangePage(CurrentPage);
    }
    private void SortRecipes()
    {
        switch (sortInt)
        {
            case 1:
                SortedRecipes = FilteredRecipes.OrderByDescending(r => r.AvgRating).ToList();
                break;

            case 2:
                SortedRecipes = FilteredRecipes.OrderBy(r => r.Name).ToList();
                break;

            case 3:
                SortedRecipes = FilteredRecipes.OrderByDescending(r => r.Name).ToList();
                break;

            case 4:
                SortedRecipes = FilteredRecipes.OrderBy(r => r.CookingTime).ToList();
                break;

            case 5:
                SortedRecipes = FilteredRecipes.OrderByDescending(r => r.CookingTime).ToList();
                break;
            case 6:
                SortedRecipes = FilteredRecipes.OrderBy(r => r.Created).ToList();
                break;
            case 7:
                SortedRecipes = FilteredRecipes.OrderByDescending(r => r.Created).ToList();
                break;
            default:
                SortedRecipes = FilteredRecipes;
                break;
        }
    }
    private async Task GetRecipesAsync()
    {
        if (Auth)
        {
            AllRecipes = await _api.GetAsync<List<Recipe>>("api/recipes");
        }
        else
        {
            AllRecipes = await _api.GetAnonAsync<List<Recipe>>("api/recipes");
        }
        FilteredRecipes = AllRecipes;
        SortedRecipes = AllRecipes;
        if (SortedRecipes.Count <= 6)
        {
            pageCount = 1;
        }
        else
        {

            pageCount = (SortedRecipes.Count / 6) + 1;
        }
    }
    private async Task GetTagsAsync()
    {
        if (Auth)
        {
            RecipeTypes = await _api.GetAsync<List<RecipeTag>>("api/recipeTags");
        }
        else
        {
            RecipeTypes = await _api.GetAnonAsync<List<RecipeTag>>("api/recipeTags");
        }
    }
    private void ChangePage(int page)
    {
        CurrentPage = page;
        pageRecipes = SortedRecipes.Skip((page - 1) * 6).Take(6).ToList();
        StateHasChanged();
    }
    public async Task DeleteRecipe(Recipe recipe)
    {
        var parameters = new DialogParameters { ["recipe"] = recipe };
        var dialog = _dialogService.Show<RecipeDelete>("Are you sure you want to delete this recipe?", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Loaded = false;
            await GetRecipesAsync();
            Loaded = true;
        }
    }
}
