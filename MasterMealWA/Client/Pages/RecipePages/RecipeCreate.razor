@page "/recipes/create"
@inject HttpClient Http
@inject IApiService _api
@inject IUserService _userService
@inject NavigationManager nav
@inject IDialogService _dialogService
@inject IImageReader _imageReader
@using System.Net.Http.Headers
<EditForm Model="@recipe" OnValidSubmit="CreateRecipeAsync">
    <DataAnnotationsValidator />
    <MudGrid>

        <MudItem xs="12">

            <MudText Typo="Typo.h3">Recipe Create</MudText>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" FullWidth="true" Color="Color.Success" Class="ml-auto">Save Recipe</MudButton>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">

                            <MudTextField Label="Title" HelperText="The name of the recipe" @bind-Value="recipe.Name" For="@(()=> recipe.Name)" />
                        </MudItem>
                        <MudItem xs="12">

                            <MudTextField Label="Description" HelperText="The description of the recipe" @bind-Value="recipe.Description" For="@(()=> recipe.Description)" />
                        </MudItem>
                        <MudItem xs="12">

                            <InputFile id="fileInput" OnChange="UploadFiles" hidden />
                            <MudFab HtmlTag="label"
                                    Color="Color.Secondary"
                                    Icon="@Icons.Filled.Image"
                                    Label="Load picture"
                                    for="fileInput" />
                            @if (recipe.ImageId != 0 || recipe.ImageId != 1)
                            {
                                <MudCard>
                                    <MudCardMedia Image="@(imageString)">
                                    </MudCardMedia>
                                </MudCard>
                                <MudButton Color="Color.Warning" OnClick="ResetImage">Reset to default Image</MudButton>
                            }
                            else
                            {

                                <MudText Typo="@Typo.h6">No Image, will use default</MudText>
                            }
                        </MudItem>
                        <MudItem xs="12">

                            <MudTextField Label="Source" HelperText="Where did you get the recipe?  (if its personal, leave blank)" @bind-Value="recipe.RecipeSource" For="@(()=> recipe.RecipeSource)" />
                        </MudItem>
                        <MudItem xs="12">

                            <MudTextField Label="Source Link" HelperText="Link to the page you found this recipe on.  Please prefix with https://" @bind-Value="recipe.RecipeSourceUrl" For="@(()=> recipe.RecipeSourceUrl)" />
                        </MudItem>
                        <MudItem xs="6">

                            <MudNumericField Label="Cooking Time" Min="15" Max="90" HelperText="Estimated minutes to cook recipe" @bind-Value="recipe.CookingTime" For="@(()=> recipe.CookingTime)" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect T="int" @bind-Value="recipe.Servings" Label="Servings" HelperText="How many people the recipe serves.  Users can select the serving size they'd like displayed or added to their shopping list.">
                                <MudSelectItem Value="1">1</MudSelectItem>
                                <MudSelectItem Value="2">2</MudSelectItem>
                                <MudSelectItem Value="4">4</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        @if (Tags == null)
                        {
                            <p>loading...</p>}
                        else
                        {
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6" Color="Color.Primary">Tags: Select at least one</MudText>
                                <MudChipSet MultiSelection="true" @bind-SelectedChips="recipeTags" Filter="true">

                                    @foreach (RecipeTag tag in Tags.OrderBy(t => t.Category))
                                    {
                                        <MudChip Color="BadgeColor(tag.Category)" Tag="tag">@tag.Name</MudChip>
                                    }
                                </MudChipSet>
                            </MudItem>
                        }
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudCheckBox @bind-Checked="recipe.IsPrivate" Label="Hide Recipe from public search"></MudCheckBox>
                </MudCardActions>
            </MudCard>
            <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">Save Recipe</MudButton>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">

            <MudCard>
                <MudCardHeader>Ingredients</MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudFab OnClick="NewIngredient" Color="Color.Success" Icon="@Icons.Material.Filled.FiberNew" Label="Add ingredient not in list"></MudFab>
                        @foreach (var ingredient in recipe.Ingredients)
                        {
                            <MudItem xs="12">

                                <MudCard Elevation="2">
                                    <MudCardContent>

                                        <QIngredientCreate qIngredient="@ingredient" ingredientList="Ingredients" />
                                    </MudCardContent>
                                    <MudCardActions>

                                        <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="(()=>recipe.Ingredients.Remove(ingredient))">Remove</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                        <MudItem>

                            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" @onclick="()=>recipe.Ingredients.Add(new())" />
                        </MudItem>

                    </MudGrid>
                </MudCardContent>
            </MudCard>
            <MudCard>
                <MudCardHeader>Supplies</MudCardHeader>
                <MudFab OnClick="NewSupply" Color="Color.Success" Icon="@Icons.Material.Filled.FiberNew" Label="Add supply not in list"></MudFab>
                <MudCardContent>
                    <MudGrid>
                        @foreach (var supply in recipe.Supplies)
                        {
                            <MudItem xs="12">

                                <MudCard Elevation="2">
                                    <MudCardContent>

                                        <SupplyPicker supply="supply" supplyList="supplyList"></SupplyPicker>
                                    </MudCardContent>
                                    <MudCardActions>

                                        <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="(()=>recipe.Supplies.Remove(supply))">Remove</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                        <MudItem>
                            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" @onclick="()=>recipe.Supplies.Add(new())" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudCard>
                <MudCardHeader>Steps</MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        @foreach (var step in recipe.Steps.OrderBy(s => s.StepNumber))
                        {
                            <MudItem xs="12">
                                <MudCard Elevation="2">
                                    <MudCardContent>

                                        <StepCreate step="step" stepmax="recipe.Steps.Count"></StepCreate>
                                    </MudCardContent>
                                    <MudCardActions>

                                        <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="(()=>recipe.Steps.Remove(step))">Remove</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                        <MudItem>
                            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" @onclick="()=>recipe.Steps.Add(new() {StepNumber=recipe.Steps.Count+1 })" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

</EditForm>
@code{
    public Recipe recipe { get; set; } = new();
    public List<RecipeTag> Tags { get; set; }
    public List<Ingredient> Ingredients { get; set; }
    public List<Supply> supplyList { get; set; }
    private MultipartFormDataContent imageFormContent { get; set; }
    private MudChip[] recipeTags { get; set; }
    private IBrowserFile bytefile { get; set; }
    private string contentType { get; set; }
    private int ImgId { get; set; }
    public DBImage image { get; set; }
    public string imageString { get; set; }
    protected override async Task OnInitializedAsync()
    {
        recipe.Servings = 2;
        recipe.CookingTime = 30;
        Tags = await _api.GetAsync<List<RecipeTag>>("api/recipeTags");
        Ingredients = await _api.GetAsync<List<Ingredient>>("api/ingredients");
        supplyList = await _api.GetAsync<List<Supply>>("api/Supplies");
        ImgId = 1;
        if (recipe.Ingredients.Count == 0)
        {
            recipe.Ingredients.Add(new());
        }
        if (recipe.Supplies.Count == 0)
        {
            recipe.Supplies.Add(new());
        }
        if (recipe.Steps.Count == 0)
        {
            recipe.Steps.Add(new());
        }
    }
    public Color BadgeColor(CategoryType type)
    {
        if (type == CategoryType.Nationality)
        {
            return Color.Primary;
        }
        if (type == CategoryType.Protein)
        {
            return Color.Secondary;
        }
        return Color.Tertiary;

    }
    public async Task CreateRecipeAsync()
    {
        recipe.Tags = recipeTags.Select(r => (RecipeTag)r.Tag).ToList();
        recipe.AuthorId = await _userService.GetUserIdAsync();
        recipe.ImageId = ImgId;
        foreach (var ing in recipe.Ingredients)
        {
            ing.Ingredient = null;
        }
        foreach (var sup in recipe.Supplies)
        {
            sup.Supply = null;
        }
        try
        {
            var dto = new RecipeCreateDto()
            {
                Recipe = recipe,
                ImageData = imageFormContent
            };
            await _api.CreateAsync<Recipe>("api/recipes", recipe);
            _snackbar.Add("Recipe Created", Severity.Success);
            nav.NavigateTo($"/recipes");
        }
        catch (Exception e)
        {
            _snackbar.Add($"Creation failed {e.Message}", Severity.Error);
        }
    }
    public async Task NewIngredient()
    {
        var dialog = _dialogService.Show<IngredientCreate>("New Ingredient");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Ingredients = await _api.GetAsync<List<Ingredient>>("api/ingredients");
        }
    }
    public async Task NewSupply()
    {
        var dialog = _dialogService.Show<SupplyCreate>("New Supply");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            supplyList = await _api.GetAsync<List<Supply>>("api/supplies"); ;
        }
    }
    IBrowserFile file;
    private async Task ResetImage()
    {
        if (image is null)
        {
            return;
        }
        var dialog = _dialogService.Show<ImageRecipeReset>("Are you sure?");
    }
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {

        var file = e.File;
        if (file != null)
        {
            var resizedFile = await file.RequestImageFileAsync("image/png", 1000, 1000);

            using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
            {
                imageFormContent = new MultipartFormDataContent();
                imageFormContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                imageFormContent.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", file.Name);
                if (recipe.ImageId == 0 || recipe.ImageId == 1)
                {

                    try
                    {
                        image = await _api.GetPreviewImage("/api/dbimages/tempimage", imageFormContent);
                        _snackbar.Add("Image Updated", Severity.Success);
                        imageString = _imageReader.ReadImageData(image.ImageData, image.ContentType);
                        StateHasChanged();

                    }
                    catch (Exception ex)
                    {
                        _snackbar.Add($"Image Failed to update {ex.Message}", Severity.Error);
                    }
                }
                else
                {
                    try
                    {

                        await _api.UpdateAsync<MultipartFormDataContent>($"api/dbimages/{recipe.ImageId}", imageFormContent);
                        _snackbar.Add("Image Updated", Severity.Success);
                        image = await _api.GetAsync<DBImage>($"/api/dbimages/{recipe.ImageId}");
                        imageString = _imageReader.ReadImageData(image.ImageData, image.ContentType);
                        StateHasChanged();
                    }
                    catch (Exception)
                    {

                        _snackbar.Add("Image Failed to update", Severity.Error);
                    }
                }

            }
        }
    }
}
