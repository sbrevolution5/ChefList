@page "/recipes/create"
@inject HttpClient Http
@inject IApiService _api
@inject IUserService _userService
@inject NavigationManager nav
@using System.Net.Http.Headers
<EditForm Model="@recipe" OnValidSubmit="CreateRecipeAsync">
    <DataAnnotationsValidator />
    <MudGrid>

        <MudItem xs="12">

            <MudText Typo="Typo.h3">Recipe Create</MudText>
        </MudItem>
        <MudItem xs="4">

            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Title" HelperText="The name of the recipe" @bind-Value="recipe.Name" For="@(()=> recipe.Name)" />
                    <MudTextField Label="Description" HelperText="The description of the recipe" @bind-Value="recipe.Description" For="@(()=> recipe.Description)" />
                    <InputFile id="fileInput" OnChange="UploadFiles" hidden />
                    <MudFab HtmlTag="label"
                            Color="Color.Secondary"
                            Icon="@Icons.Filled.Image"
                            Label="Load picture"
                            for="fileInput" />
                    @if (files != null)
                    {
                        <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
                        <MudList>
                            @foreach (var file in files)
                            {
                                <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                                    @file.Name <code>@file.Size bytes</code>
                                </MudListItem>
                            }
                        </MudList>
                    }
                    <MudTextField Label="Source" HelperText="Where did you get the recipe?  (if its personal, leave blank)" @bind-Value="recipe.RecipeSource" For="@(()=> recipe.RecipeSource)" />
                    <MudTextField Label="Source Link" HelperText="Link to the page you found this recipe on.  Please prefix with https://" @bind-Value="recipe.RecipeSourceUrl" For="@(()=> recipe.RecipeSourceUrl)" />
                    <MudNumericField Label="Cooking Time" HelperText="Estimated minutes to cook recipe" @bind-Value="recipe.CookingTime" For="@(()=> recipe.CookingTime)" />
                    <MudNumericField Label="Servings" HelperText="How many people the recipe Serves" @bind-Value="recipe.Servings" For="@(()=> recipe.Servings)" />
                    @if (Tags == null)
                    {
                        <p>loading...</p>}
                    else
                    {
                        <MudChipSet MultiSelection="true" @bind-SelectedChips="recipeTags" Filter="true">

                            @foreach (RecipeTag tag in Tags)
                            {
                                <MudChip Tag="tag">@tag.Name</MudChip>
                            }
                        </MudChipSet>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudCheckBox @bind-Checked="recipe.IsPrivate" Label="Hide Recipe from public search"></MudCheckBox>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="4">

            <MudCard>
                <MudCardHeader>Ingredients</MudCardHeader>
                <MudCardContent>
                    <MudGrid>

                        @foreach (var ingredient in recipe.Ingredients)
                        {
                            <MudItem xs="12">

                                <MudCard Elevation="2">
                                    <QIngredientCreate qIngredient="@ingredient" ingredientList="ingredients" />
                                    <MudButton Color="Color.Error" @onclick="(()=>recipe.Ingredients.Remove(ingredient))">Remove</MudButton>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>

                    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" @onclick="()=>recipe.Ingredients.Add(new())" />

                </MudCardContent>
            </MudCard>
            <MudCard>
                <MudCardHeader>Supplies</MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        @foreach (var supply in recipe.Supplies)
                        {
                            <MudItem xs="12">

                                <MudCard Elevation="2">
                                    <SupplyPicker supply="supply" supplyList="supplyList"></SupplyPicker>
                                    <MudButton Color="Color.Error" @onclick="(()=>recipe.Supplies.Remove(supply))">Remove</MudButton>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" @onclick="()=>recipe.Supplies.Add(new())" />
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="4">
            <MudCard>
                <MudCardHeader>Steps</MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        @foreach (var step in recipe.Steps)
                        {
                            <MudItem xs="12">
                                <MudCard Elevation="2">
                                    <MudCardContent>

                                        <StepCreate step="step" numDefault="recipe.Steps.Count"></StepCreate>
                                    </MudCardContent>
                                    <MudCardActions>

                                        <MudButton Color="Color.Error" @onclick="(()=>recipe.Steps.Remove(step))">Remove</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" @onclick="()=>recipe.Steps.Add(new())" />

                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save Recipe</MudButton>
</EditForm>
@code{
    public Recipe recipe { get; set; } = new();
    public List<RecipeTag> Tags { get; set; }
    public List<Ingredient> ingredients { get; set; }
    public List<Supply> supplyList { get; set; }
    private MudChip[] recipeTags { get; set; }
    private IBrowserFile bytefile { get; set; }
    private string contentType { get; set; }
    private int ImgId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Tags = await _api.GetAllRecipeTypesAsync();
        ingredients = await _api.GetAllIngredientsAsync();
        supplyList = await _api.GetAllSuppliesAsync();
        ImgId = 1;
    }
    public async Task CreateRecipeAsync()
    {
        recipe.Tags = recipeTags.Select(r => (RecipeTag)r.Tag).ToList();
        recipe.AuthorId = await _userService.GetUserIdAsync();
        recipe.ImageId = ImgId;
        await _api.CreateNewRecipeAsync(recipe);
        nav.NavigateTo($"/recipes");
    }
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {

        var imageFiles = e.GetMultipleFiles();
        foreach (var imageFile in imageFiles)
        {
            if (imageFile != null)
            {
                var resizedFile = await imageFile.RequestImageFileAsync("image/png", 1000, 1000);

                using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);
                    ImgId = await _api.UploadImageAsync(content);
                    //await OnChange.InvokeAsync(ImgUrl);
                }
            }
        }
    }
}
