@page "/ingredients"
@inject IApiService _api
@inject IDialogService _dialogService
@inject NavigationManager nav
@if (Ingredients is null)
{
    <Loader></Loader>

}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudItem xs="12" md="3">
                <AuthorizeView Roles="Admin, Moderator">
                    <Authorized>
                        <MudButton @onclick='()=>nav.NavigateTo("/ingredients/types")'>Manage Ingredient Types</MudButton>
                    </Authorized>
                </AuthorizeView>
                <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" OnClick="NewIngredient" />
            </MudItem>
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h3">IngredientIndex</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="9">


                            <MudSelect Label="Sort Recipes" T="int" @bind-Value="sortInt">
                                <MudSelectItem Value="0">Default</MudSelectItem>
                                <MudSelectItem Value="5">A-Z</MudSelectItem>
                                <MudSelectItem Value="6">Z-A</MudSelectItem>
                                <MudSelectItem Value="1">Recipe Count (High-low)</MudSelectItem>
                                <MudSelectItem Value="2">Recipe Count (Low-high)</MudSelectItem>
                                <MudSelectItem Value="3">Ingredient Type (Ascending)</MudSelectItem>
                                <MudSelectItem Value="4">Ingredient Type (Descending)</MudSelectItem>
                            </MudSelect>

                        </MudItem>
                        <MudItem xs="3">
                            <MudButton OnClick="SortIngredients" Variant="Variant.Filled" Color="Color.Primary">Sort</MudButton>
                        </MudItem>
                        @foreach (var ingredient in SortedIngredients)
                        {
                            var count = CountDict.GetValueOrDefault(ingredient.Id);
                            <MudItem xs="12" sm="6" md="4" lg="3">

                                <MudPaper Elevation="4" Style="padding-left:5px;margin:10px;">
                                    <MudGrid>
                                        <MudItem xs="4">
                                            <MudText>
                                                @ingredient.Name
                                            </MudText>
                                            <MudText Typo="Typo.subtitle2">@ingredient.Type.Name</MudText>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudBadge Content="count" Color="Color.Primary" Overlap="true" Bordered="true" Class="mx-6 my-4">
                                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="()=>OpenQuicklist(GetRecipeList(ingredient))">View Recipes </MudButton>
                                            </MudBadge>
                                        </MudItem>
                                        <MudItem xs="2">
                                            <AuthorizeView Roles="Admin, Moderator">
                                                <Authorized>
                                                    <MudIconButton Variant="Variant.Filled" Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" OnClick="@(()=>EditIngredient(ingredient))"></MudIconButton>
                                                    <MudIconButton Variant="Variant.Filled" Color="Color.Warning" Icon="@Icons.Material.Filled.Delete" OnClick="@(()=>DeleteIngredient(ingredient,count))"></MudIconButton>
                                                </Authorized>
                                            </AuthorizeView>
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" OnClick="NewIngredient" />
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}
@code {
    public List<Ingredient> Ingredients { get; set; }
    public List<Ingredient> SortedIngredients { get; set; }
    public List<Recipe> Recipes { get; set; }
    public Dictionary<int, int> CountDict { get; set; } = new();
    public int sortInt { get; set; } = 0;
    protected override async Task OnInitializedAsync()
    {
        Recipes = await _api.GetAsync<List<Recipe>>("api/recipes/ingredients");
        Ingredients = await _api.GetAsync<List<Ingredient>>("api/ingredients");
        foreach (var ing in Ingredients)
        {
            CountDict.Add(ing.Id, Recipes.SelectMany(r => r.Ingredients).Where(i => i.IngredientId == ing.Id).Count());
        }
        SortIngredients();
        base.OnInitialized();
    }
    public async Task NewIngredient()
    {
        var dialog = _dialogService.Show<IngredientCreate>("New Ingredient");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Ingredients = await _api.GetAsync<List<Ingredient>>("api/ingredients");
        }
        SortIngredients();
    }
    public async Task EditIngredient(Ingredient ingredient)
    {
        var parameters = new DialogParameters { ["Ingredient"] = ingredient };
        var dialog = _dialogService.Show<IngredientEdit>("Edit Ingredient", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Ingredients = await _api.GetAsync<List<Ingredient>>("api/ingredients");
            SortIngredients();
        }
    }
    public void SortIngredients()
    {
        switch (sortInt)
        {
            case 1:
                SortedIngredients = Ingredients.OrderByDescending(r => CountDict.GetValueOrDefault(r.Id)).ToList();
                break;

            case 2:
                SortedIngredients = Ingredients.OrderBy(r => CountDict.GetValueOrDefault(r.Id)).ToList();
                break;

            case 3:
                SortedIngredients = Ingredients.OrderByDescending(r => r.TypeId).ToList();
                break;

            case 4:
                SortedIngredients = Ingredients.OrderBy(r => r.TypeId).ToList();
                break;

            case 5:
                SortedIngredients = Ingredients.OrderBy(r => r.Name).ToList();
                break;
            case 6:
                SortedIngredients = Ingredients.OrderByDescending(r => r.Name).ToList();
                break;
            default:
                SortedIngredients = Ingredients;
                break;
        }
    }
    public async Task DeleteIngredient(Ingredient ingredient, int count)
    {
        var parameters = new DialogParameters { ["Ingredient"] = ingredient, ["recipeNumber"] = count };
        var dialog = _dialogService.Show<IngredientDelete>
    ("Delete Ingredient", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Ingredients = await _api.GetAsync<List<Ingredient>>("api/ingredients");
            SortIngredients();
        }
    }
    public List<Recipe> GetRecipeList(Ingredient ingredient)
    {
        return Recipes.Where(r => r.Ingredients.Where(i => i.IngredientId == ingredient.Id).Any()).ToList();
    }
    public void OpenQuicklist(List<Recipe> recipeList)
    {
        var parameters = new DialogParameters { ["recipeList"] = recipeList };
        var dialog = _dialogService.Show<QuickListDialog>("Recipes with this ingredient", parameters);
    }
}
