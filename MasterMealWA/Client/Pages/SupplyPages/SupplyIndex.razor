@page "/supplies"
@inject IApiService _api
@inject IDialogService _dialogService
@inject IUserService _userService
@if (Supplies is null)
{
    <div class="d-flex align-center justify-center">
        <Loader />
    </div>
}
else
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h3">Supplies</MudText>
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" OnClick="NewSupply" />
            <MudButton Color="Color.Primary" Variant="Variant.Filled" aria-label="add" OnClick="SaveMySupplies">Save My Supplies</MudButton>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                @foreach (var supply in Supplies)
                {
                    <AuthorizeView Roles="Admin, Moderator">
                        <Authorized>
                            <MudItem xs="12" sm="6" md="4" lg="3">
                                <MudPaper Elevation="2" Style="padding-left:5px;margin:10px;">
                                    <MudGrid>
                                        <MudItem xs="8">
                                            <MudCheckBox Disabled="!Auth" @bind-Checked="UserHasSupplyDict[supply.Id]" Label="@supply.Name"></MudCheckBox>
                                        </MudItem>
                                        <MudItem xs="4">
                                            <MudIconButton Color="Color.Warning" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => EditSupply(supply))"></MudIconButton>
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                            </MudItem>
                        </Authorized>
                        <NotAuthorized>
                            <MudItem xs="12" sm="6" md="4" lg="3">
                                <MudPaper Elevation="2" Style="padding-left:5px;margin:10px;">
                                    <MudGrid>
                                        <MudItem xs="12">
                                                <MudCheckBox Disabled="!Auth" @bind-Checked="UserHasSupplyDict[supply.Id]" Label="@supply.Name"></MudCheckBox>
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                            </MudItem>
                        </NotAuthorized>
                    </AuthorizeView>
                }
            </MudGrid>
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" OnClick="NewSupply" />
        </MudCardContent>
    </MudCard>
}
@code {
    public List<Supply> Supplies { get; set; }
    public List<Supply> UserSupplies { get; set; }
    public Dictionary<int, bool> UserHasSupplyDict { get; set; } = new();
    private string userId { get; set; }
    public bool Auth { get; set; }
    protected override async Task OnInitializedAsync()
    {
        userId = await _userService.GetUserIdAsync();
        Auth = !string.IsNullOrEmpty(userId);
        if (Auth)
        {
            Supplies = await _api.GetAsync<List<Supply>>("api/supplies");
        }
        else
        {
            Supplies = await _api.GetAnonAsync<List<Supply>>("api/supplies");

        }
        await InitUserSuppliesAsync();
        base.OnInitialized();
    }
    public async Task NewSupply()
    {
        var dialog = _dialogService.Show<SupplyCreate>("New Supply");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Supplies = await _api.GetAsync<List<Supply>>("api/supplies");
        }
    }
    public async Task EditSupply(Supply supply)
    {
        var parameters = new DialogParameters { ["Supply"] = supply };
        var dialog = _dialogService.Show<SupplyEdit>("Edit Supply", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Supplies = await _api.GetAsync<List<Supply>>("api/supplies");
        }
    }
    //private void ToggleUserSupplyDict(int supplyId)
    //{
    //    var current = UserHasSupplyDict[supplyId];
    //    UserHasSupplyDict[supplyId] = !current;
    //}
    private async Task SaveMySupplies()
    {
        UserSupplies.Clear();
        foreach (var supply in Supplies)
        {
            if (UserHasSupplyDict.TryGetValue(supply.Id, out bool res))
            {
                if (res)
                {
                    UserSupplies.Add(supply);
                }
            }
        }
        try
        {
            await _api.UpdateAsync<List<Supply>>("api/supplies/user", UserSupplies);
            _snackbar.Add("Your supply list updated!", Severity.Success);
        }
        catch (Exception e)
        {
            _snackbar.Add($"Error updating supply list {e.Message}", Severity.Error);
        }

    }
    private async Task InitUserSuppliesAsync()
    {
        if (Auth)
        {

            UserSupplies = await _api.GetAsync<List<Supply>>("api/supplies/user");
            foreach (var supply in Supplies)
            {
                if (UserSupplies.Select(s => s.Id).Contains(supply.Id))
                {
                    UserHasSupplyDict.Add(supply.Id, true);
                }
                else
                {
                    UserHasSupplyDict.Add(supply.Id, false);

                }
            }
        }
        else
        {
            foreach (var supply in Supplies)
            {
                UserHasSupplyDict.Add(supply.Id, false);
            }
        }
    }
}
