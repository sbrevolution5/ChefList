@page "/meals"
@inject IApiService _api
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@inject NavigationManager nav
@attribute [Authorize]
<MudText Typo="Typo.h1">Meals</MudText>
<MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.CalendarToday" aria-label="add" OnClick="AddMeal" />
@if (meals is null)
{
    <div class="d-flex align-center justify-center">
        <Loader />
    </div>

}
else
{
    <MudTimeline>
        @foreach (var meal in meals.OrderByDescending(m => m.Date))
        {

            <MudTimelineItem>
                <ItemOpposite>
                    <MudPaper Style="padding: 5px;">

                        <MudText>@meal.Recipe.Name</MudText>
                    </MudPaper>
                </ItemOpposite>
                <ItemContent>
                    <MudPaper Style="padding: 5px;">

                        <MudText>@meal.Date.ToShortDateString()</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="()=>EditMeal(meal)" Variant="Variant.Filled" Color="Color.Warning"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="()=>DeleteMeal(meal)" Variant="Variant.Filled" Color="Color.Error"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.List" OnClick="()=>NewList(meal.Date)" Variant="Variant.Filled" Color="Color.Success"></MudIconButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Link='@($"/recipes/details/{meal.RecipeId}")'>Recipe</MudButton>
                    </MudPaper>
                </ItemContent>
            </MudTimelineItem>
        }
    </MudTimeline>
}
@code {
    public List<Meal> meals { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {

            meals = await _api.GetAsync<List<Meal>>("/api/meals");
        }
        catch (Exception e)
        {
            _snackbar.Add($"Error getting meals {e.Message}", Severity.Error);
        }
        await base.OnInitializedAsync();
    }
    public async Task AddMeal()
    {
        var parameters = new DialogParameters { ["recipe"] = null };
        var dialog = _dialogService.Show<MealCreate>("Schedule Meal", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            try
            {

                meals = await _api.GetAsync<List<Meal>>("/api/meals");
            }
            catch (Exception e)
            {
                _snackbar.Add($"Error getting meals {e.Message}", Severity.Error);
            }
        }
    }
    public async Task NewList(DateTime EndDate)
    {
        var parameters = new DialogParameters { ["DefaultEndDate"] = EndDate };
        var dialog = _dialogService.Show<ListCreate>("New List", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            nav.NavigateTo("/shoppinglists/");
        }
    }
    public async Task EditMeal(Meal meal)
    {
        var parameters = new DialogParameters { ["meal"] = meal };
        var dialog = _dialogService.Show<MealEdit>("Edit Meal", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            try
            {

                meals = await _api.GetAsync<List<Meal>>("/api/recipes/myrecipes");
            }
            catch (Exception e)
            {
                _snackbar.Add($"Error getting meals {e.Message}", Severity.Error);
            }
        }
    }
    public async Task DeleteMeal(Meal meal)
    {
        var parameters = new DialogParameters { ["meal"] = meal };
        var dialog = _dialogService.Show<MealDelete>("Are you sure you want to delete this meal?", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            try
            {
                meals = await _api.GetAsync<List<Meal>>("/api/recipes/myrecipes");
            }
            catch (Exception e)
            {
                _snackbar.Add($"Error getting meals {e.Message}", Severity.Error);
            }
        }
    }
}
