@inject IApiService _api
@inject ISnackbar _snackbar
<MudHidden IsHidden="@string.IsNullOrEmpty(UserId)">
    <MudText Typo="Typo.subtitle2">Your Rating</MudText>
    <MudRating SelectedValue="userRating" ReadOnly="ReadOnly" SelectedValueChanged="(int i)=>SaveRating(i)"></MudRating>
</MudHidden>
<MudText Typo="Typo.subtitle2">Average Rating</MudText>
<MudRating SelectedValue="AverageRating" ReadOnly="true"></MudRating>
@code {
    [Parameter]
    public Recipe recipe { get; set; }
    [Parameter]
    public string UserId { get; set; }
    public int AverageRating { get; set; }
    public int userRating { get; set; } = 0;
    public bool IsNewRating { get; set; }
    public bool ReadOnly { get; set; }
    public async Task SaveRating(int i)
    {
        if (i != 0 && i != userRating)
        {

            if (IsNewRating)
            {
                try
                {
                    var ratingDto = new Rating()
                    {
                        ChefId = UserId,
                        RecipeId = recipe.Id,
                        Stars = i
                    };
                    await _api.CreateAsync<Rating>("/api/ratings", ratingDto);
                    _snackbar.Add($"Rating saved", Severity.Success);
                    IsNewRating = false;
                    userRating = i;
                    StateHasChanged();
                }
                catch (Exception e)
                {
                    _snackbar.Add($"Error saving rating {e.Message}", Severity.Error);
                }

            }
            else
            {
                RatingEditDto dto = new()
                {
                    RecipeId = recipe.Id,
                    ChefId = UserId,
                    NewRating = i
                };
                try
                {
                    await _api.UpdateAsync<RatingEditDto>("/api/ratings", dto);
                    _snackbar.Add($"Rating saved", Severity.Success);
                    IsNewRating = false;
                    userRating = i;
                }
                catch (Exception e)
                {
                    _snackbar.Add($"Error updating rating {e.Message}", Severity.Error);
                }
            }
        }
    }
    protected override void OnInitialized()
    {
        if (recipe.Ratings.Any())
        {
            AverageRating = Convert.ToInt32(recipe.AvgRating);
            if (!string.IsNullOrEmpty(UserId))
            {
                userRating = recipe.Ratings.Where(r => r.ChefId == UserId).FirstOrDefault().Stars;
            }
        }
        else
        {
            AverageRating = 0;
        }
        if (userRating == 0)
        {
            IsNewRating = true;
        }
        base.OnInitialized();
    }
}
