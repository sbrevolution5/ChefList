@inject IApiService _api
@inject NavigationManager _nav
<MudDialog>
    <DialogContent>
        <MudTextField Label="Ingredient Name" @bind-Value="ingredient.Name"></MudTextField>
        @if (types is null)
        {
            <Loader></Loader>

        }
        else
        {

            <MudSelect Label="Ingredient Type" HelperText="Where you'd find the ingredient while shopping'" @bind-Value="ingredient.TypeId">
                @foreach (var type in types)
                    {

                    <MudSelectItem Value="@type.Id">@type.Name</MudSelectItem>
                    }
            </MudSelect>
        }
        <MudSelect @bind-Value="ingredient.MeasurementType" Label="Measurement Type">
            @foreach (MeasurementType measure in Enum.GetValues(typeof(MeasurementType)))
            {

                <MudSelectItem Value="@measure"> @measure  </MudSelectItem>
            }
        </MudSelect>
        <MudText Color="Color.Error">Please do not add duplicate ingredients.  Make sure your ingredient is not already in the database before you save!</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="CreateIngredient">Save</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    private Ingredient ingredient { get; set; } = new();
    private List<IngredientType> types { get; set; }
    protected override async Task OnInitializedAsync()
    {
        ingredient.TypeId = 1;
        types = await _api.GetAllIngredientTypesAsync();
    }
    public void Cancel()
    {
        MudDialog.Cancel();
    }
    public async Task CreateIngredient()
    {
        await _api.CreateNewIngredientAsync(ingredient);
        MudDialog.Close(DialogResult.Ok(ingredient));
    }
}
