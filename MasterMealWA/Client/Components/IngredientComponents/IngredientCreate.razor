@inject IApiService _api
@inject NavigationManager _nav
<MudDialog>
    <DialogContent>
        <MudTextField Label="Ingredient Name" @bind-Value="ingredient.Name"></MudTextField>
        @if (types is null)
        {
            <Loader></Loader>

        }
        else
        {

            <MudSelect Label="Ingredient Type" HelperText="Where you'd find the ingredient while shopping" @bind-Value="ingredient.TypeId">
                @foreach (var type in types.Where(t=>!t.ShoppingOnly).ToList())
                    {

                    <MudSelectItem Value="@type.Id">@type.Name</MudSelectItem>
                    }
            </MudSelect>
        }
        <MudText Typo="Typo.body1">Measurement Type:</MudText>
        <MudRadioGroup @bind-SelectedOption="ingredient.MeasurementType">
            @foreach (MeasurementType measure in Enum.GetValues(typeof(MeasurementType)))
            {

                <MudRadio Option="@measure">@measure</MudRadio>
            }
        </MudRadioGroup>
        <MudText Color="Color.Error">Please do not add duplicate ingredients.  Make sure your ingredient is not already in the database before you save!</MudText>
        <MudText Color="Color.Error">Each ingredient should be the <span>most generic version</span> of the ingredient.  Use the shopping notes to specify Brand, fat-free/low-calorie, frozen, and other things for your recipe.</MudText>
        <MudText Color="Color.Primary">Example 1:  Your recipe calls for low sodium soy sauce.  The ingredient is soy sauce, specify "Low Sodium" in the shopping notes.</MudText>
        <MudText Color="Color.Primary">Example 2:  Your recipe calls for Frank's red hot sauce.  The ingredient is hot sauce, specify "Frank's red hot sauce" in the shopping notes.</MudText>
        <MudText Typo="Typo.body2">This is so that similar ingredients can be combined in a shopping list.  If there are two recipes on the list, both calling for 2tsp hot sauce, and one describing Frank's red hot sauce, you can buy a bottle of Frank's to use for both recipes.  If the recipes call for 2 different brands, they will both be listed under the "hot sauce" shopping item.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Dark">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="CreateIngredient" Variant="Variant.Filled">Save</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    private Ingredient ingredient { get; set; } = new();
    private List<IngredientType> types { get; set; }
    protected override async Task OnInitializedAsync()
    {
        ingredient.TypeId = 1;
        try
        {

            types = await _api.GetAsync<List<IngredientType>>("/api/ingredientTypes");
        }
        catch (Exception e)
        {
            _snackbar.Add($"Error getting ingredient types {e.Message}", Severity.Error);
        }
    }
    public void Cancel()
    {
        MudDialog.Cancel();
    }
    public async Task CreateIngredient()
    {
        try
        {
            var ingredientResult = await _api.CreateAsync<Ingredient,Ingredient>("api/ingredients", ingredient);
            _snackbar.Add("Ingredient Created", Severity.Success);
            
            MudDialog.Close(DialogResult.Ok(ingredientResult));
        }
        catch (Exception e)
        {
            _snackbar.Add($"Creation failed: {e.Message}, Your ingredient is probably already in the database.", Severity.Error);
        }
    }
}
