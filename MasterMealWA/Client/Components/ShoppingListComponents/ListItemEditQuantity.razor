@using MasterMealWA.Shared.Models.Dtos
@using MasterMealWA.Client.Extensions 
@inject IApiService _api
<MudDialog>
    <DialogContent>
        <EditForm Model="listItem">
            <MudText>Editing @listItem.QuantityString</MudText>
            <MudForm>
                <MudGrid>

                    <MudItem xs="3">

                        <MudNumericField Label="Number" T="int" @bind-Value="listItem.QuantityNumber"></MudNumericField>
                    </MudItem>
                    <MudItem xs="3">
                        <MudSelect Label="Fraction" T="Fraction" @bind-Value="listItem.Fraction">
                            @foreach (Fraction frac in Enum.GetValues(typeof(Fraction)))
                            {
                                <MudSelectItem Value="@frac">@frac.GetDescription()</MudSelectItem>
                            }
                        </MudSelect>

                    </MudItem>
                    <MudItem xs="6">

                        @if (listItem.MeasurementType == MeasurementType.Volume)
                        {
                            <MudSelect Label="Volume Measurement" T="VolumeMeasurementUnit?" @bind-Value="listItem.VolumeMeasurementUnit">
                                @foreach (VolumeMeasurementUnit? measure in Enum.GetValues(typeof(VolumeMeasurementUnit)))
                                {
                                    <MudSelectItem Value="@measure">@measure</MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else if (listItem.MeasurementType == MeasurementType.Mass)
                        {
                            <MudSelect Label="Mass Measurement" T="MassMeasurementUnit?" @bind-Value="listItem.MassMeasurementUnit">
                                @foreach (MassMeasurementUnit? measure in Enum.GetValues(typeof(MassMeasurementUnit)))
                                {
                                    <MudSelectItem Value="@measure">@measure</MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else if (listItem.MeasurementType == MeasurementType.Count)
                        {

                        }
                    </MudItem>
                </MudGrid>
            </MudForm>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Dark">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="EditItem" Variant="Variant.Filled">Edit</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public ShoppingIngredient listItem { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    public void Cancel()
    {
        MudDialog.Cancel();
    }
    public async Task EditItem()
    {
        try
        {
            await _api.UpdateAsync<ShoppingIngredient>($"/api/ShoppingIngredients/{listItem.Id}", listItem);
            _snackbar.Add("Item Edited", Severity.Success);
            MudDialog.Close(DialogResult.Ok<ShoppingIngredient>(listItem));
        }
        catch (Exception e)
        {
            _snackbar.Add($"Could not edit Item {e.Message}", Severity.Error);
        }

    }
}
