<EditForm Model="supply">
    <MudAutocomplete HelperText="Start typing to search for an supply, If you can't find your supply, create a new one with the button above." Required="true" Label="Ingredient" T="Supply" ResetValueOnEmptyText="true" Value="supply.Supply" ToStringFunc="@(s=> $"{s.Name}")" SearchFunc="@Search"></MudAutocomplete>
    <MudSelect Label="Supply" T="int" @bind-Value="supply.SupplyId">
        @foreach (Supply sup in supplyList)
        {
            <MudSelectItem Value="sup.Id">@sup.Name</MudSelectItem>
        }
    </MudSelect>
    <MudNumericField Label="Quantity" @bind-Value="supply.Quantity"></MudNumericField>
</EditForm>

@code {
    [Parameter]
    public QSupply supply { get; set; }
    [Parameter]
    public List<Supply> supplyList { get; set; }
    protected override void OnInitialized()
    {
        if (supply.Quantity == 0)
        {
            supply.Quantity = 1;
        }
        if (supply.SupplyId == 0)
        {
            supply.SupplyId = supplyList.FirstOrDefault().Id;
        }
    }
    private async Task<IEnumerable<Supply>> Search(string v)
    {
        await Task.Delay(1);
        if (String.IsNullOrEmpty(v))
        {
            return supplyList;
        }
        return supplyList.Where(i => i.Name.ToLower().Contains(v.ToLower()));
    }
}
