@using MasterMealWA.Client.Extensions
<EditForm Model="qingredient">

    <MudForm>
        <MudGrid>

            <MudItem xs="3">

                <MudNumericField Label="Number" T="int" Value="qingredient.QuantityNumber" ValueChanged="(i)=>QNumChanged(i)"></MudNumericField>
            </MudItem>
            <MudItem xs="3">
                <MudSelect Label="Fraction" T="Fraction" @onchange="ValueChanged" @bind-Value="qingredient.Fraction">
                    @foreach (Fraction frac in Enum.GetValues(typeof(Fraction)))
                    {
                        <MudSelectItem Value="@frac">@frac.GetDescription()</MudSelectItem>
                    }
                </MudSelect>

            </MudItem>
            <MudItem xs="6">

                @if (qingredient.MeasurementType == MeasurementType.Volume)
                {
                    <MudSelect Label="Volume Measurement" T="VolumeMeasurementUnit?" @onchange="ValueChanged" @bind-Value="qingredient.VolumeMeasurementUnit" >
                        @foreach (VolumeMeasurementUnit? measure in Enum.GetValues(typeof(VolumeMeasurementUnit)))
                        {
                            <MudSelectItem Value="@measure">@measure</MudSelectItem>
                        }
                    </MudSelect>
                }
                else if (qingredient.MeasurementType == MeasurementType.Mass)
                {
                    <MudSelect Label="Mass Measurement" T="MassMeasurementUnit?" @onchange="ValueChanged" @bind-Value="qingredient.MassMeasurementUnit">
                        @foreach (MassMeasurementUnit? measure in Enum.GetValues(typeof(MassMeasurementUnit)))
                        {
                            <MudSelectItem Value="@measure">@measure</MudSelectItem>
                        }
                    </MudSelect>
                }
                else if (qingredient.MeasurementType == MeasurementType.Count)
                {

                }
                else
                {
                    <MudText>Please select an ingredient</MudText>
                }
            </MudItem>
            <MudItem xs="12">
                <MudAutocomplete HelperText="Start typing to search for an ingredient, If you can't find your ingredient, create a new one with the button below." Required="true" Label="Ingredient" T="Ingredient" ValueChanged="@((Ingredient i)=>MeasureChange(i))" Value="qingredient.Ingredient" ToStringFunc="@(i=> $"{i.Name} ({i.MeasurementType.ToString()})")" SearchFunc="@Search" MaxItems="null"></MudAutocomplete>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Margin="Margin.Dense" Label="Shopping Notes" @bind-Value="qingredient.Notes" HelperText="Specify brand, fat-free/low calorie, frozen/fresh, or anything specific to your recipe.  These will show up as sub-items on the shopping list." HelperTextOnFocus="true"></MudTextField>
            </MudItem>
        </MudGrid>
    </MudForm>
</EditForm>
@code {
    [Parameter]
    public List<Ingredient> ingredientList { get; set; }
    [Parameter]
    public QIngredient qingredient { get; set; }
    [Parameter]
    public EventCallback<string> ComponentDataUpdated { get; set; }

    async Task ValueChanged()
    {
        await ComponentDataUpdated.InvokeAsync("");
    }
    public MeasurementType measurementType { get; set; }
    private async Task<IEnumerable<Ingredient>> Search(string v)
    {
        await Task.Delay(1);
        if (String.IsNullOrEmpty(v))
        {
            return ingredientList;
        }
        return ingredientList.Where(i => i.Name.ToLower().Contains(v.ToLower()));
    }
    protected override async Task OnInitializedAsync()
    {
        if (qingredient.IngredientId != 0)
        {

            await MeasureChange(qingredient.Ingredient);
        }
    }
    public async Task QNumChanged(int i)
    {
        qingredient.QuantityNumber = i;
        await ValueChanged();
    }
    public async Task MeasureChange(Ingredient ing)
    {
        qingredient.IngredientId = ing.Id;
        qingredient.Ingredient = ing;
        measurementType = ingredientList.FirstOrDefault(i => i.Id == ing.Id).MeasurementType;
        qingredient.MeasurementType = measurementType;
        if (qingredient.MeasurementType == MeasurementType.Volume && qingredient.VolumeMeasurementUnit == null)
        {
            qingredient.VolumeMeasurementUnit = VolumeMeasurementUnit.Teaspoon;
        }
        else if (qingredient.MeasurementType == MeasurementType.Mass && qingredient.MassMeasurementUnit == null)
        {
            qingredient.MassMeasurementUnit = MassMeasurementUnit.pound;
        }
        await ValueChanged();
        return;
    }
}
